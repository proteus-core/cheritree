open import Pervasives
open import Pervasives_extra
open import Sail2_instr_kinds
open import Sail2_values
open import Sail2_operators_mwords
open import Sail2_prompt_monad
open import Sail2_prompt

val write_ram : forall 'rv 'e 'n. Size 'n => write_kind -> mword ty64 -> integer -> mword 'n -> bool -> monad 'rv bool 'e
let write_ram wk addr width data tag =
  write_memt wk addr width data (bitU_of_bool tag)

val read_ram : forall 'rv 'e 'n. Size 'n => read_kind -> mword ty64 -> integer -> bool -> monad 'rv (mword 'n * bool) 'e
let read_ram rk addr width read_tag =
  if read_tag then
    read_memt rk addr width >>= (fun ((data : mword 'n), (tag : bitU)) ->
    bool_of_bitU_fail tag >>= (fun (tag : bool) ->
    return (data, tag)))
  else
    read_mem rk () addr width >>= (fun (data : mword 'n) ->
    return (data, false))

val write_tag_bool : forall 'rv 'e. mword ty64 -> bool -> monad 'rv unit 'e
let write_tag_bool addr tag =
  read_memt Read_plain addr 16 >>= (fun ((cap : mword ty128), _) ->
  write_memt Write_plain addr 16 cap (bitU_of_bool tag) >>= (fun _ -> return ()))

val read_tag_bool : forall 'rv 'e. mword ty64 -> monad 'rv bool 'e
let read_tag_bool addr =
  read_memt Read_plain addr 16 >>= (fun ((cap : mword ty128), tag) ->
  bool_of_bitU_fail tag)
